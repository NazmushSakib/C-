#include <iostream>
using namespace std;

const int MAX = 5; // Maximum size of the stack

// Stack variables
int stack[MAX];
int top = -1; // Initialize top of stack

// Function to push an element onto the stack
void push(int value) {
    if (top >= MAX - 1) //MAX -1 cause, array[4]={0,1,2,3,4}= means 5 elements while stack size-> stack[3]={0,1,2,3} =4 elements
    {
        cout << "Stack overflow. Cannot push " << value << ".\n";
        return;
    }
    stack[++top] = value; // Increment top and add value
    cout << value << " pushed onto stack.\n";
}

// Function to pop an element from the stack
int pop() {
    if (top < 0) {
        cout << "Stack is empty. Cannot pop.\n";
        return -1; // or throw an exception
    }
    return stack[top--]; // Return top value and decrement top
}

// Function to peek at the top element of the stack
int peek() {
    if (top < 0) {
        cout << "Stack is empty. Cannot peek.\n";
        return -1; // or throw an exception
    }
    return stack[top]; // Return the top value
}

// Function to check if the stack is empty
bool isEmpty() {
    return top < 0;
}

// Main function to demonstrate stack operations
int main() {
    push(10);
    push(20);
    push(30);

    cout << "Top element is: " << peek() << endl;

    cout << pop() << " popped from stack.\n";
    cout << "Top element is: " << peek() << endl;

    cout << pop() << " popped from stack.\n";
    cout << pop() << " popped from stack.\n";
    cout << pop() << " popped from stack.\n"; // Attempt to pop from an empty stack

    return 0;
}

////Using Class
#include <iostream>
using namespace std;

// Node structure for linked list
struct Node {
    int data;
    Node* next;
};

// Stack class
class Stack {
private:
    Node* top;

public:
    Stack() : top(nullptr) {}

    // Push an element onto the stack
    void push(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = top;
        top = newNode;
        cout << value << " pushed onto stack.\n";
    }

    // Pop an element from the stack
    int pop() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot pop.\n";
            return -1; // or throw an exception
        }
        int poppedValue = top->data;
        Node* temp = top;
        top = top->next;
        delete temp;
        cout << poppedValue << " popped from stack.\n";
        return poppedValue;
    }

    // Peek at the top element of the stack
    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot peek.\n";
            return -1; // or throw an exception
        }
        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Destructor to clean up the stack
    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }
};

// Main function to demonstrate stack operations
int main() {
    Stack stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    cout << "Top element is: " << stack.peek() << endl;

    stack.pop();
    cout << "Top element is: " << stack.peek() << endl;

    stack.pop();
    stack.pop();
    stack.pop(); // Attempt to pop from an empty stack

    return 0;
}


//Using Stuct

#include <iostream>
using namespace std;

// Node structure for linked list
struct Node {
    int data;
    Node* next;
};

// Function to push an element onto the stack
void push(Node*& top, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = top;
    top = newNode;
    cout << value << " pushed onto stack.\n";
}

// Function to pop an element from the stack
int pop(Node*& top) {
    if (top == nullptr) {
        cout << "Stack is empty. Cannot pop.\n";
        return -1; // or throw an exception
    }
    int poppedValue = top->data;
    Node* temp = top;
    top = top->next;
    delete temp;
    cout << poppedValue << " popped from stack.\n";
    return poppedValue;
}

// Function to peek at the top element of the stack
int peek(Node* top) {
    if (top == nullptr) {
        cout << "Stack is empty. Cannot peek.\n";
        return -1; // or throw an exception
    }
    return top->data;
}

// Function to check if the stack is empty
bool isEmpty(Node* top) {
    return top == nullptr;
}

// Main function to demonstrate stack operations
int main() {
    Node* top = nullptr; // Initialize the top of the stack

    push(top, 10);
    push(top, 20);
    push(top, 30);

    cout << "Top element is: " << peek(top) << endl;

    pop(top);
    cout << "Top element is: " << peek(top) << endl;

    pop(top);
    pop(top);
    pop(top); // Attempt to pop from an empty stack

    return 0;
}


